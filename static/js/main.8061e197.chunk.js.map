{"version":3,"sources":["components/SmartMeteo/DumbMeteoWrapper.js","utils/logger.js","components/SmartMeteo/SmartMeteoWrapper.js","components/AppRoot/AppRoot.js","index.js"],"names":["useStyles","makeStyles","fab","margin","top","right","bottom","left","position","SearchAutocomplete","props","filterOptions","createFilterOptions","limit","ignoreCase","ignoreAccents","Autocomplete","defaultValue","label","options","list","map","el","onInputChange","handleChange","selectOnFocus","handleHomeEndKeys","freeSolo","renderInput","params","TextField","variant","InputProps","startAdornment","InputAdornment","MeteoText","renderText","rainLevel","rainLevelText","timeBeforeRain","Typography","component","gutterBottom","MeteoChart","width","height","data","chartData","type","dataKey","stroke","isAnimationActive","tickMargin","DumbMeteoWrapper","classes","Fragment","Box","display","flexDirection","my","searchCityList","searchDefaultValue","inputValue","searchInputValue","searchHandleChange","Hidden","mdUp","Fab","color","aria-label","className","onClick","fabHandleClick","loglevel","SmartMeteoWrapper","defaultCity","id","useState","currentCity","setCurrentCity","displayedCity","setDisplayedCity","cityList","setCityList","setRainLevel","setTimeBeforeRain","setChartData","useEffect","citySearch","a","cityFetch","fetchResult","log","error","length","cityListUpdate","meteoUpdate","useCallback","cityId","meteoFetch","meteoResult","find","niveauPluie","indexOf","API_URL","process","fetch","ok","json","jsonResult","jsonTransformed","nomAffiche","split","pop","join","Error","processJsonForChart","timeStr","niveauPluieText","hourStartStr","minutesStartStr","startDate","Date","setHours","setMinutes","jsonChart","dataCadran","index","newEl","m","startDateCopy","getTime","setTime","hours","getHours","getMinutes","document","title","event","value","foundCity","toLowerCase","getElementsByClassName","focus","theme","createMuiTheme","responsiveFontSizes","AppRoot","ThemeProvider","Container","maxWidth","ReactDOM","render","StrictMode","CssBaseline","getElementById"],"mappings":"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","file":"static/js/main.8061e197.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Box, TextField, Typography, Fab, Hidden, InputAdornment } from '@material-ui/core';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { ResponsiveContainer, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip } from 'recharts';\r\n\r\nconst useStyles = makeStyles({\r\n    fab: {\r\n        margin: 0,\r\n        top: 'auto',\r\n        right: 20,\r\n        bottom: 20,\r\n        left: 'auto',\r\n        position: 'fixed',\r\n    }\r\n});\r\n\r\nfunction DumbMeteoWrapper(props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Box display=\"flex\" flexDirection=\"column\">\r\n                <Box my={1}>\r\n                    <SearchAutocomplete\r\n                        list={props.searchCityList}\r\n                        defaultValue={props.searchDefaultValue}\r\n                        inputValue={props.searchInputValue}\r\n                        handleChange={props.searchHandleChange}\r\n                        label=\"Ville\" />\r\n                </Box>\r\n                <Box my={1}>\r\n                    <MeteoText\r\n                        rainLevel={props.rainLevel}\r\n                        timeBeforeRain={props.timeBeforeRain}\r\n                    />\r\n                </Box>\r\n                <Box my={1}>\r\n                    <MeteoChart\r\n                        chartData={props.chartData}\r\n                    />\r\n                </Box>\r\n                <Hidden mdUp>\r\n                    <Fab color=\"primary\" aria-label=\"search\" className={classes.fab} onClick={props.fabHandleClick}>\r\n                        <SearchIcon />\r\n                    </Fab>\r\n                </Hidden>\r\n            </Box>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nfunction SearchAutocomplete(props) {\r\n\r\n    const filterOptions = createFilterOptions({\r\n        limit: 25,\r\n        ignoreCase: true,\r\n        ignoreAccents: true,\r\n    });\r\n\r\n    return (\r\n        <Autocomplete\r\n            defaultValue={props.defaultValue.label}\r\n            options={props.list.map(el => el.label)}\r\n\r\n            onInputChange={props.handleChange}\r\n            selectOnFocus\r\n            handleHomeEndKeys\r\n\r\n            freeSolo\r\n            filterOptions={filterOptions}\r\n            renderInput={(params) =>\r\n                <TextField {...params} label={props.label} variant=\"outlined\"\r\n                    InputProps={{\r\n                        ...params.InputProps, startAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                                <SearchIcon />\r\n                            </InputAdornment>\r\n                        )\r\n                    }} />}\r\n        />\r\n    );\r\n}\r\n\r\nfunction MeteoText(props) {\r\n\r\n    let renderText;\r\n\r\n    if (props.rainLevel > 0) {\r\n\r\n        let rainLevelText;\r\n        switch (props.rainLevel) {\r\n            case 1:\r\n                rainLevelText = \"faible\"\r\n                break;\r\n            case 2:\r\n                rainLevelText = \"modérée\"\r\n                break;\r\n            case 3:\r\n                rainLevelText = \"forte\"\r\n                break;\r\n            default:\r\n                rainLevelText = \"torrentielle\"\r\n                break;\r\n        }\r\n        renderText = `Attention pluie ${rainLevelText} prévue dans ${props.timeBeforeRain} minutes ! 🌧️`;\r\n    } else {\r\n        renderText = \"Vous pouvez sortir sans risque ! 😎\";\r\n    }\r\n\r\n    const shouldRender = props.rainLevel > -1;\r\n\r\n    if(shouldRender){\r\n        return (\r\n            < Typography variant=\"h2\" component=\"h1\" gutterBottom >\r\n                {renderText}\r\n            </Typography >\r\n        );\r\n    } else {\r\n        return null;\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction MeteoChart(props) {\r\n    return (\r\n        <ResponsiveContainer width=\"100%\" height={200}>\r\n            <LineChart\r\n                height={200}\r\n                width={500}\r\n                data={props.chartData}\r\n            >\r\n                <Line type=\"monotone\" dataKey=\"niveauPluie\" stroke=\"#8884d8\" isAnimationActive={true} />\r\n                <XAxis dataKey=\"hours\" />\r\n                <YAxis tickMargin={25} />\r\n                <CartesianGrid stroke=\"#ccc\" />\r\n                <Tooltip />\r\n            </LineChart>\r\n        </ResponsiveContainer>\r\n    )\r\n}\r\n\r\nexport default DumbMeteoWrapper; ","import * as loglevel from 'loglevel'\r\n\r\nif (process.env.NODE_ENV!=='production') {\r\n  loglevel.setLevel('debug')\r\n} else {\r\n  loglevel.setLevel('error')\r\n}\r\n\r\nexport default loglevel\r\n","import React from 'react';\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport DumbMeteoWrapper from '../SmartMeteo/DumbMeteoWrapper';\r\nimport log from '../../utils/logger';\r\n\r\n\r\n/**\r\n * Orchestrate State for application\r\n */\r\nfunction SmartMeteoWrapper(props) {\r\n\r\n  const defaultCity = {\r\n    label: \"Rennes\",\r\n    id: 352380\r\n  }\r\n\r\n  const [currentCity, setCurrentCity] = useState(defaultCity);\r\n  const [displayedCity, setDisplayedCity] = useState(currentCity);\r\n  const [cityList, setCityList] = useState([]);\r\n\r\n  const [rainLevel, setRainLevel] = useState(-1);\r\n  const [timeBeforeRain, setTimeBeforeRain] = useState();\r\n\r\n  const [chartData, setChartData] = useState([]);\r\n\r\n\r\n  /** \r\n   * Trigger when the search is updated\r\n  */\r\n  useEffect(() => {\r\n    if (currentCity.label.length === 2 || currentCity.label === defaultCity.label) {\r\n      cityListUpdate(currentCity.label);\r\n    }\r\n\r\n    async function cityListUpdate(citySearch) {\r\n      try {\r\n        const fetchResult = await cityFetch(citySearch);\r\n        setCityList(fetchResult);\r\n\r\n      } catch (error) {\r\n        log.error(error);\r\n        // setState on error\r\n      }\r\n    }\r\n\r\n  }, [currentCity, defaultCity.label]);\r\n\r\n  const meteoUpdate = useCallback(async (cityId) => {\r\n    try {\r\n      const meteoResult = await meteoFetch(cityId);\r\n\r\n      const rainLevel = meteoResult.find(el => el.niveauPluie > 0);\r\n\r\n      if(rainLevel){\r\n        const timeBeforeRain = meteoResult.indexOf(rainLevel) * 5;\r\n        setRainLevel(rainLevel.niveauPluie);\r\n        setTimeBeforeRain(timeBeforeRain);  \r\n      } else {\r\n        setRainLevel(0);\r\n      }\r\n      \r\n      setChartData(meteoResult);\r\n\r\n    } catch (error) {\r\n      log.error(error);\r\n      // setState on error\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Triggered when cityDisplayed update and text and graph should update\r\n   */\r\n  useEffect(() => {\r\n    document.title = `${displayedCity.label}`;\r\n\r\n    meteoUpdate(displayedCity.id);\r\n\r\n  }, [displayedCity, meteoUpdate]);\r\n\r\n\r\n\r\n\r\n  function searchHandleChange(event, value) {\r\n    const foundCity = cityList.find(el => el.label.toLowerCase() === value.toLowerCase());\r\n\r\n    if (foundCity) {\r\n      setCurrentCity(foundCity);\r\n      setDisplayedCity(foundCity);\r\n    } else {\r\n      const newCity = {\r\n        label: value\r\n      }\r\n      setCurrentCity(newCity);\r\n    }\r\n  }\r\n\r\n  async function cityFetch(citySearch) {\r\n    const API_URL = `${process.env.REACT_APP_API_HOST}/http://www.meteofrance.com/mf3-rpc-portlet/rest/lieu/facet/pluie/search`;\r\n    const fetchResult = await fetch(`${API_URL}/${citySearch}`);\r\n    if (fetchResult.ok) {\r\n      const jsonResult = await fetchResult.json();\r\n      const jsonTransformed = jsonResult.map(el => {\r\n        // Remove the postal code from city name\r\n        let label = el.nomAffiche.split(' ');\r\n        if (label.length > 1) {\r\n          label.pop()\r\n          label = label.join(' ');\r\n        };\r\n        return {\r\n          label: label,\r\n          id: el.id\r\n        }\r\n      });\r\n      return jsonTransformed;\r\n    } else {\r\n      throw new Error(\"Can't Fetch Search API\");\r\n    }\r\n  }\r\n\r\n  async function meteoFetch(cityId) {\r\n    const API_URL = `${process.env.REACT_APP_API_HOST}/http://www.meteofrance.com/mf3-rpc-portlet/rest/pluie`;\r\n    const fetchResult = await fetch(`${API_URL}/${cityId}`);\r\n    if (fetchResult.ok) {\r\n      const jsonResult = await fetchResult.json();\r\n      return processJsonForChart(jsonResult);\r\n    } else {\r\n      throw new Error(\"Can't Fetch Meteo API\");\r\n    }\r\n\r\n    // Transform the json result from meteo API to a \"chartable\" one\r\n    function processJsonForChart(json) {\r\n\r\n      function getTimePlusMinutes(item, m) {\r\n        return item.getTime() + (m * 60 * 1000);\r\n      }\r\n\r\n      const timeStr = json.niveauPluieText[0].split(' ')[0];\r\n      const hourStartStr = timeStr[2] + timeStr[3];\r\n      const minutesStartStr = timeStr[5] + timeStr[6];\r\n      let startDate = new Date();\r\n      startDate.setHours(hourStartStr);\r\n      startDate.setMinutes(minutesStartStr);\r\n\r\n      let jsonChart = json.dataCadran;\r\n      jsonChart = jsonChart.map((el, index) => {\r\n        let newEl = {};\r\n        if (el.niveauPluie === 0) {\r\n          newEl.niveauPluie = null;\r\n        } else {\r\n          newEl.niveauPluie = el.niveauPluie - 1\r\n        }\r\n\r\n        let startDateCopy = new Date(startDate.getTime());\r\n        startDateCopy.setTime(getTimePlusMinutes(startDate, 5 * index));\r\n\r\n        newEl.hours = `${startDateCopy.getHours()}:${(startDateCopy.getMinutes() < 10 ? '0' : '') + startDateCopy.getMinutes()}`;\r\n        return newEl;\r\n      });\r\n\r\n\r\n      return jsonChart;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  function fabHandleClick() {\r\n    let muiInput = document.getElementsByClassName(\"MuiAutocomplete-input\")[0];\r\n    muiInput.focus();\r\n    // setChartData(chartDataDefaultV2);\r\n  }\r\n\r\n  return (\r\n    <DumbMeteoWrapper\r\n      searchDefaultValue={defaultCity}\r\n      searchInputValue={currentCity}\r\n      searchCityList={cityList}\r\n      searchHandleChange={searchHandleChange}\r\n      rainLevel={rainLevel}\r\n      timeBeforeRain={timeBeforeRain}\r\n      chartData={chartData}\r\n      fabHandleClick={fabHandleClick}\r\n    />\r\n  );\r\n}\r\n\r\nexport default SmartMeteoWrapper;","import React from 'react';\r\nimport { Container, Box} from '@material-ui/core';\r\nimport { createMuiTheme, ThemeProvider, responsiveFontSizes } from '@material-ui/core/styles';\r\nimport  SmartMeteoWrapper from '../SmartMeteo/SmartMeteoWrapper';\r\n\r\nlet theme = createMuiTheme();\r\ntheme = responsiveFontSizes(theme);\r\n\r\nfunction AppRoot() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n\r\n      {/* // Wrap all application (for background usage later) */}\r\n      <Container maxWidth={false}>\r\n        {/* Wrap all app content */}\r\n        <Box my={6}>\r\n          <Container component=\"main\" maxWidth=\"md\">\r\n            <SmartMeteoWrapper />\r\n          </Container>\r\n        </Box>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default AppRoot;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport AppRoot from './components/AppRoot/AppRoot';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <CssBaseline />\r\n    <AppRoot />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}