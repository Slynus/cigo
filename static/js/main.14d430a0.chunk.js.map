{"version":3,"sources":["utils/logger.js","components/SmartMeteo/SmartMeteoWrapper.js","components/AppRoot/AppRoot.js","index.js"],"names":["loglevel","useStyles","makeStyles","fab","margin","top","right","bottom","left","position","DumbMeteoWrapper","props","classes","Fragment","Box","display","flexDirection","my","SearchAutocomplete","list","searchCityList","defaultValue","searchDefaultValue","inputValue","searchInputValue","handleChange","searchHandleChange","label","MeteoText","text","meteoText","style","padding","backgroundColor","Hidden","mdUp","Fab","color","aria-label","className","filterOptions","createFilterOptions","limit","ignoreCase","ignoreAccents","Autocomplete","options","map","el","onInputChange","selectOnFocus","handleHomeEndKeys","freeSolo","renderInput","params","TextField","variant","InputProps","startAdornment","InputAdornment","Typography","component","gutterBottom","SmartMeteoWrapper","defaultCity","id","useState","currentCity","setCurrentCity","displayedCity","setDisplayedCity","cityList","setCityList","setMeteoText","cityFetch","citySearch","a","API_URL","process","fetch","fetchResult","ok","json","jsonResult","jsonTransformed","nomAffiche","split","length","pop","join","Error","meteoFetch","cityId","levelPluie","dataCadran","niveauPluie","useEffect","log","error","cityListUpdate","document","title","meteoUpdate","event","value","foundCity","find","toLowerCase","theme","createMuiTheme","responsiveFontSizes","AppRoot","ThemeProvider","Container","maxWidth","ReactDOM","render","StrictMode","CssBaseline","getElementById"],"mappings":"uXAKEA,WAAkB,SAGLA,QCDTC,EAAYC,YAAW,CAC3BC,IAAK,CACHC,OAAQ,EACRC,IAAK,OACLC,MAAO,GACPC,OAAQ,GACRC,KAAM,OACNC,SAAU,WAsId,SAASC,EAAiBC,GACxB,IAAMC,EAAUX,IAEhB,OACE,kBAAC,IAAMY,SAAP,KACE,kBAACC,EAAA,EAAD,CAAKC,QAAQ,OAAOC,cAAc,UAChC,kBAACF,EAAA,EAAD,CAAKG,GAAI,GACP,kBAACC,EAAD,CACEC,KAAMR,EAAMS,eACZC,aAAcV,EAAMW,mBACpBC,WAAYZ,EAAMa,iBAClBC,aAAcd,EAAMe,mBACpBC,MAAM,WAEV,kBAACb,EAAA,EAAD,CAAKG,GAAI,GACP,kBAACW,EAAD,CAAWC,KAAMlB,EAAMmB,aAEzB,kBAAChB,EAAA,EAAD,CAAKG,GAAI,GACP,yBAAKc,MAAO,CAAEC,QAAS,OAAQC,gBAAiB,WAElD,kBAACC,EAAA,EAAD,CAAQC,MAAI,GACV,kBAACC,EAAA,EAAD,CAAKC,MAAM,UAAUC,aAAW,SAASC,UAAW3B,EAAQT,KAC1D,kBAAC,IAAD,UAQZ,SAASe,EAAmBP,GAE1B,IAAM6B,EAAgBC,YAAoB,CACxCC,MAAO,GACPC,YAAY,EACZC,eAAe,IAGjB,OACE,kBAACC,EAAA,EAAD,CACExB,aAAcV,EAAMU,aAAaM,MAMjCmB,QAASnC,EAAMQ,KAAK4B,KAAI,SAAAC,GAAE,OAAIA,EAAGrB,SAEjCsB,cAAetC,EAAMc,aACrByB,eAAa,EACbC,mBAAiB,EAEjBC,UAAQ,EACRZ,cAAeA,EACfa,YAAa,SAACC,GAAD,OACX,kBAACC,EAAA,EAAD,iBAAeD,EAAf,CAAuB3B,MAAOhB,EAAMgB,MAAO6B,QAAQ,WACjDC,WAAU,2BACLH,EAAOG,YADF,IACcC,eACpB,kBAACC,EAAA,EAAD,CAAgBlD,SAAS,OACvB,kBAAC,IAAD,eAQhB,SAASmB,EAAUjB,GACjB,OACE,kBAACiD,EAAA,EAAD,CAAYJ,QAAQ,KAAKK,UAAU,KAAKC,cAAY,GACjDnD,EAAMkB,MAKEkC,MA1Mf,SAA2BpD,GAEzB,IAAMqD,EAAc,CAClBrC,MAAO,SACPsC,GAAI,QAJ0B,EAUMC,mBAASF,GAVf,mBAUzBG,EAVyB,KAUZC,EAVY,OAWUF,mBAASC,GAXnB,mBAWzBE,EAXyB,KAWVC,EAXU,OAYAJ,mBAAS,IAZT,mBAYzBK,EAZyB,KAYfC,EAZe,OAcEN,mBAAS,IAdX,mBAczBpC,EAdyB,KAcd2C,EAdc,cAiFjBC,EAjFiB,8EAiFhC,WAAyBC,GAAzB,qBAAAC,EAAA,6DACQC,EADR,UACqBC,iEADrB,0DAE4BC,MAAM,GAAD,OAAIF,EAAJ,YAAeF,IAFhD,YAEQK,EAFR,QAGkBC,GAHlB,iCAI6BD,EAAYE,OAJzC,cAIUC,EAJV,OAKUC,EAAkBD,EAAWpC,KAAI,SAAAC,GAErC,IAAIrB,EAAQqB,EAAGqC,WAAWC,MAAM,KAKhC,OAJI3D,EAAM4D,OAAS,IACjB5D,EAAM6D,MACN7D,EAAQA,EAAM8D,KAAK,MAEd,CACL9D,MAAOA,EACPsC,GAAIjB,EAAGiB,OAdf,kBAiBWmB,GAjBX,cAmBU,IAAIM,MAAM,0BAnBpB,6CAjFgC,+BAwGjBC,EAxGiB,8EAwGhC,WAA0BC,GAA1B,qBAAAhB,EAAA,6DACQC,EADR,UACqBC,iEADrB,wCAE4BC,MAAM,GAAD,OAAIF,EAAJ,YAAee,IAFhD,YAEQZ,EAFR,QAGkBC,GAHlB,iCAI6BD,EAAYE,OAJzC,cAIUC,EAJV,OAKUU,EAAaV,EAAWW,WAAW/C,KAAI,SAAAC,GAAE,OAAIA,EAAG+C,eAL1D,kBAMWF,GANX,cAQU,IAAIH,MAAM,yBARpB,6CAxGgC,sBAoHhC,OAjGAM,qBAAU,WAAM,4CAKd,WAA8BrB,GAA9B,eAAAC,EAAA,+EAE8BF,EAAUC,GAFxC,OAEUK,EAFV,OAGIR,EAAYQ,GAHhB,gDAMIiB,EAAIC,MAAJ,MANJ,0DALc,sBACmB,IAA7B/B,EAAYxC,MAAM4D,QAAgBpB,EAAYxC,QAAUqC,EAAYrC,OAD1D,oCAEZwE,CAAehC,EAAYxC,SAc5B,CAACwC,EAAaH,EAAYrC,QAK7BqE,qBAAU,WAAM,4CAKd,WAA2BJ,GAA3B,SAAAhB,EAAA,+EAE6Be,EAAWC,GAFxC,cAQmB,GAAK,EAClBnB,EA9Ce,kDAgDfA,EAjDe,iDAsCrB,gDAeIwB,EAAIC,MAAJ,MAfJ,0DALc,sBACdE,SAASC,MAAT,UAAoBhC,EAAc1C,OADpB,oCAGd2E,CAAYjC,EAAcJ,MAqBzB,CAACI,EAAevC,IAqDjB,kBAACpB,EAAD,CACEY,mBAAoB0C,EACpBxC,iBAAkB2C,EAClB/C,eAAgBmD,EAChB7C,mBAtDJ,SAA4B6E,EAAOC,GACjC,IAAMC,EAAYlC,EAASmC,MAAK,SAAA1D,GAAE,OAAIA,EAAGrB,MAAMgF,gBAAkBH,EAAMG,iBAEnEF,GACFrC,EAAeqC,GACfnC,EAAiBmC,IAKjBrC,EAHgB,CACdzC,MAAO6E,KA+CT1E,UAAWA,KC1Ib8E,EAAQC,cACZD,EAAQE,YAAoBF,GAmBbG,MAjBf,WACE,OACE,kBAACC,EAAA,EAAD,CAAeJ,MAAOA,GAGpB,kBAACK,EAAA,EAAD,CAAWC,UAAU,GAEnB,kBAACpG,EAAA,EAAD,CAAKG,GAAI,GACP,kBAACgG,EAAA,EAAD,CAAWpD,UAAU,OAAOqD,SAAS,MACnC,kBAAC,EAAD,W,eCXZC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,MACA,kBAAC,EAAD,OAEFlB,SAASmB,eAAe,W","file":"static/js/main.14d430a0.chunk.js","sourcesContent":["import * as loglevel from 'loglevel'\r\n\r\nif (process.env.NODE_ENV!=='production') {\r\n  loglevel.setLevel('debug')\r\n} else {\r\n  loglevel.setLevel('error')\r\n}\r\n\r\nexport default loglevel\r\n","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\nimport { Box, TextField, Typography, Fab, Hidden, InputAdornment } from '@material-ui/core';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport log from '../../utils/logger';\r\nconst useStyles = makeStyles({\r\n  fab: {\r\n    margin: 0,\r\n    top: 'auto',\r\n    right: 20,\r\n    bottom: 20,\r\n    left: 'auto',\r\n    position: 'fixed',\r\n  }\r\n});\r\n\r\n/**\r\n * Orchestrate State for application\r\n */\r\nfunction SmartMeteoWrapper(props) {\r\n\r\n  const defaultCity = {\r\n    label: \"Rennes\",\r\n    id: 352380\r\n  }\r\n\r\n  const texteSansPluie = \"Vous pouvez sortir sans risque ! 😎\";\r\n  const texteAvecPluie = \"Attention pluie prévue ! 🌧️\";\r\n\r\n  const [currentCity, setCurrentCity] = useState(defaultCity);\r\n  const [displayedCity, setDisplayedCity] = useState(currentCity);\r\n  const [cityList, setCityList] = useState([]);\r\n\r\n  const [meteoText, setMeteoText] = useState(\"\");\r\n\r\n  /** \r\n   * Trigger when the search is updated\r\n  */\r\n  useEffect(() => {\r\n    if (currentCity.label.length === 2 || currentCity.label === defaultCity.label) {\r\n      cityListUpdate(currentCity.label);\r\n    }\r\n\r\n    async function cityListUpdate(citySearch) {\r\n      try {\r\n        const fetchResult = await cityFetch(citySearch);\r\n        setCityList(fetchResult);\r\n\r\n      } catch (error) {\r\n        log.error(error);\r\n        // setState on error\r\n      }\r\n    }\r\n\r\n  }, [currentCity, defaultCity.label]);\r\n\r\n  /**\r\n   * Triggered when cityDisplayed update and text and graph should update\r\n   */\r\n  useEffect(() => {\r\n    document.title = `${displayedCity.label}`;\r\n\r\n    meteoUpdate(displayedCity.id);\r\n\r\n    async function meteoUpdate(cityId) {\r\n      try {\r\n        const levelPluie = await meteoFetch(cityId);\r\n\r\n\r\n        // majMeteooText() //V2\r\n        // majGraph()\r\n\r\n        if (levelPluie[0] > 1) {\r\n          setMeteoText(texteAvecPluie);\r\n        } else {\r\n          setMeteoText(texteSansPluie);\r\n        }\r\n\r\n      } catch (error) {\r\n        log.error(error);\r\n        // setState on error\r\n      }\r\n    }\r\n  }, [displayedCity, meteoText]);\r\n\r\n\r\n  function searchHandleChange(event, value) {\r\n    const foundCity = cityList.find(el => el.label.toLowerCase() === value.toLowerCase());\r\n\r\n    if (foundCity) {\r\n      setCurrentCity(foundCity);\r\n      setDisplayedCity(foundCity);\r\n    } else {\r\n      const newCity = {\r\n        label: value\r\n      }\r\n      setCurrentCity(newCity);\r\n    }\r\n  }\r\n\r\n  async function cityFetch(citySearch) {\r\n    const API_URL = `${process.env.REACT_APP_API_HOST}/mf3-rpc-portlet/rest/lieu/facet/pluie/search`;\r\n    const fetchResult = await fetch(`${API_URL}/${citySearch}`);\r\n    if (fetchResult.ok) {\r\n      const jsonResult = await fetchResult.json();\r\n      const jsonTransformed = jsonResult.map(el => {\r\n        // Remove the postal code from city name\r\n        let label = el.nomAffiche.split(' ');\r\n        if (label.length > 1) {\r\n          label.pop()\r\n          label = label.join(' ');\r\n        };\r\n        return {\r\n          label: label,\r\n          id: el.id\r\n        }\r\n      });\r\n      return jsonTransformed;\r\n    } else {\r\n      throw new Error(\"Can't Fetch Search API\");\r\n    }\r\n  }\r\n\r\n  async function meteoFetch(cityId) {\r\n    const API_URL = `${process.env.REACT_APP_API_HOST}/mf3-rpc-portlet/rest/pluie`;\r\n    const fetchResult = await fetch(`${API_URL}/${cityId}`);\r\n    if (fetchResult.ok) {\r\n      const jsonResult = await fetchResult.json();\r\n      const levelPluie = jsonResult.dataCadran.map(el => el.niveauPluie);\r\n      return levelPluie;\r\n    } else {\r\n      throw new Error(\"Can't Fetch Meteo API\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <DumbMeteoWrapper\r\n      searchDefaultValue={defaultCity}\r\n      searchInputValue={currentCity}\r\n      searchCityList={cityList}\r\n      searchHandleChange={searchHandleChange}\r\n      meteoText={meteoText}\r\n    />\r\n  );\r\n}\r\n\r\nfunction DumbMeteoWrapper(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Box display=\"flex\" flexDirection=\"column\">\r\n        <Box my={1}>\r\n          <SearchAutocomplete\r\n            list={props.searchCityList}\r\n            defaultValue={props.searchDefaultValue}\r\n            inputValue={props.searchInputValue}\r\n            handleChange={props.searchHandleChange}\r\n            label=\"Ville\" />\r\n        </Box>\r\n        <Box my={1}>\r\n          <MeteoText text={props.meteoText} />\r\n        </Box>\r\n        <Box my={1}>\r\n          <div style={{ padding: '50px', backgroundColor: 'aqua' }}></div>\r\n        </Box>\r\n        <Hidden mdUp>\r\n          <Fab color=\"primary\" aria-label=\"search\" className={classes.fab}>\r\n            <SearchIcon />\r\n          </Fab>\r\n        </Hidden>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nfunction SearchAutocomplete(props) {\r\n\r\n  const filterOptions = createFilterOptions({\r\n    limit: 25,\r\n    ignoreCase: true,\r\n    ignoreAccents: true,\r\n  });\r\n\r\n  return (\r\n    <Autocomplete\r\n      defaultValue={props.defaultValue.label}\r\n      // inputValue={props.inputValue}\r\n      // defaultValue={props.defaultValue.label}\r\n      // inputValue={props.inputValue.label}\r\n\r\n      // getOptionLabel={opt => opt.label}\r\n      options={props.list.map(el => el.label)}\r\n\r\n      onInputChange={props.handleChange}\r\n      selectOnFocus\r\n      handleHomeEndKeys\r\n\r\n      freeSolo\r\n      filterOptions={filterOptions}\r\n      renderInput={(params) =>\r\n        <TextField {...params} label={props.label} variant=\"outlined\"\r\n          InputProps={{\r\n            ...params.InputProps, startAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <SearchIcon />\r\n              </InputAdornment>\r\n            )\r\n          }} />}\r\n    />\r\n  );\r\n}\r\n\r\nfunction MeteoText(props) {\r\n  return (\r\n    <Typography variant=\"h1\" component=\"h1\" gutterBottom>\r\n      {props.text}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nexport default SmartMeteoWrapper;","import React from 'react';\r\nimport { Container, Box} from '@material-ui/core';\r\nimport { createMuiTheme, ThemeProvider, responsiveFontSizes } from '@material-ui/core/styles';\r\nimport  SmartMeteoWrapper from '../SmartMeteo/SmartMeteoWrapper';\r\n\r\nlet theme = createMuiTheme();\r\ntheme = responsiveFontSizes(theme);\r\n\r\nfunction AppRoot() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n\r\n      {/* // Wrap all application (for background usage later) */}\r\n      <Container maxWidth={false}>\r\n        {/* Wrap all app content */}\r\n        <Box my={6}>\r\n          <Container component=\"main\" maxWidth=\"md\">\r\n            <SmartMeteoWrapper />\r\n          </Container>\r\n        </Box>\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default AppRoot;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport AppRoot from './components/AppRoot/AppRoot';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <CssBaseline />\r\n    <AppRoot />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}